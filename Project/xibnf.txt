<program>			::= (<using> | <variable> | <class> | <orphan> | <block>)*

<using>				::= 'using' <ident> ';'
<variable>			::= ['global'] 'var' (<ident> ['=' <expression>])+ [';']
<class>				::= 'class' <ident> '{'
						(<class-variable> | <constructor> | <destructor> | <class-function>)*
						'}'
<orphan>			::= '{' <block> '}'

<class-variable>	::= <accessor> <variable>
<constructor>		::= 'public' 'constructor' <parameter-list> '{'
						<block>
						'}'
<destructor>		::= 'public' 'destructor' <parameter-list> '{'
						<block>
						'}'
<class-function>	::= <accessor> <function>
<function>			::= 'function' <ident> <parameter-list> '{'
						<block>
						'}'
<parameter-list>	::= [':' <ident> [',' <ident>]*]

<block>				::= (<variable> | <assignment>)*
<assignment>		::= [<ident> <assign-op>] <expression>
<expresion>			::= <term> [<add-op> <term>]* ';'
<term>				::= <signed-factor> [<mul-op> <signed-factor>]*
<signed-factor>		::= [<add-op>] <factor>
<factor>			::= (<literal> | <variable>)

<accessor>			::= ['public' | 'private' | 'protected']
<add-op>			::= ('+' | '-')
<mul-op>			::= ('*' | '/' | '%')
<assign-op>			::= ('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '|=' | '^=' | '&=')