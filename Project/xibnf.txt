<program>				::= (<using> | <variable> | <class> | <orphan> | <block>)*

<using>					::= 'using' <ident> ';'
<variable>				::= ['global'] 'var' (<ident> ['=' <expression>])+ [';']
<class>					::= 'class' <ident> '{'
							(<class-variable> | <constructor> | <destructor> | <class-function>)*
							'}'
<orphan>				::= '{' <block> '}'

<class-variable>		::= <accessor> <variable>
<constructor>			::= 'public' 'constructor' <parameter-list> '{'
							<block>
							'}'
<destructor>			::= 'public' 'destructor' <parameter-list> '{'
							<block>
							'}'
<class-function>		::= <accessor> <function>
<function>				::= 'function' <ident> <parameter-list> '{'
							<block>
							'}'
<parameter-list>		::= [':' <ident> [',' <ident>]*]

<return-statement>		::= 'return' [<ident> | <literal>]

<block>					::= (<variable> | <assignment>)*
<assignment>			::= [<ident> <assign-op> ]* <ternary-expression>
<ternary-expression>	::= <logical-and-or> ['?' <logical-and-or> ':' <logical-and-or>]*
<logical-and-or>		::= <bitwise-xor-or> [<logical-and-or-op> <bitwise-xor-or>]*
<bitwise-xor-or>		::= <bitwise-and> [<bitwise-xor-or-op> <bitwise-and>]*
<bitwise-and>			::= <relation-term> ['&' <relation-term>]*
<relation-term>			::= <relation-gl-term> [<relation-op> <relation-gl-term>]*
<relation-gl-term>		::= <shift-term> [<relation-gl-op> <shift-term>]*
<shift-term>			::= <expression> [<bitwise-shift-op> <expression>]*
<expression>			::= <term> [<add-op> <term>]* ';'
<term>					::= <signed-factor> [<mul-op> <signed-factor>]*
<signed-factor>			::= ([<add-op>] <factor> | '!' <factor> | '~' <factor> | <inc-op> <factor>)
<factor>				::= (<literal> | <variable>)

<accessor>				::= ['public' | 'private' | 'protected']
<add-op>				::= ('+' | '-')
<mul-op>				::= ('*' | '/' | '%')
<assign-op>				::= ('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '|=' | '^=' | '&=')
<relation-gl-op>		::= ('<' | '>' | '<=' | '>=')
<logical-and-or-op>		::= ('&&' | '||')
<bitwise-xor-or>		::= ('^' | '|')
<inc-op>				::= ('++' | '--')
